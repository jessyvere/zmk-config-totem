//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <interfaces/hid-trackball.dtsi>

// normal characters
#define DE_Z Y
#define DE_Y Z

#define DE_SS MINUS // ß
#define DE_ADIA SQT // ä
#define DE_ODIA SEMI // ö
#define DE_UDIA LBKT // ü

#define DE_CIRC GRAVE // accent circumflex ^ and ring °
#define DE_ACUT EQUAL // accent acute ´ and grave `
#define DE_PLUS RBKT // + and * and ~
#define DE_HASH BSLH // # and '
#define DE_LABK NUBS // < and > and |
#define DE_MINS FSLH // - and _

#define DE_SLSH LS(N7)
#define DE_DEG LS(DE_CIRC) // °
#define DE_EXLM LS(N1) // !
#define DE_DQUO LS(N2) // "
#define DE_SECT LS(N3) // §
#define DE_DLR  LS(N4) // $
#define DE_PERC LS(N5) // %
#define DE_AMPR LS(N6) // &
#define DE_SLSH LS(N7) // /
#define DE_EQL  LS(N0) // =
#define DE_QUES LS(DE_SS) // ?
#define DE_GRV  LS(DE_ACUT) // `
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_COLN LS(DOT) // :
#define DE_SCLN LS(KP_COMMA) // ;
#define DE_UNDS LS(DE_MINS) // _

#define DE_LPRN LS(N8) // (
#define DE_RPRN LS(N9) // )
#define DE_LCBR RA(N7) // {
#define DE_RCBR RA(N0) // }
#define DE_LBRC RA(N8) // [
#define DE_RBRC RA(N9) // ]
#define DE_BSLS RA(DE_SS) // backslash
#define DE_AT  RA(Q) // @
#define DE_EURO RA(E) // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LABK) // |

&mt {
    tapping-term-ms = <230>;
    flavor = "balanced";
};

&sl {
    ignore-modifiers;
};

&caps_word {
    continue-list = <DE_MINS DE_UNDS LSHFT BACKSPACE DELETE>;
};

&hid_trackball_interface {
    automouse-layer = <5>;
    automouse-layer-timeout-ms = <400>;
};

/ {
    macros {
        quit: quit {
        compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp F4>
                , <&macro_release &kp LALT>
                ;
        };

        app_switch: app_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_release &kp LALT>
                ;
        };

        interrupt: interrupt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LALT>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };

        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp DE_EQL &kp DE_RABK>
                ;
        };
    };

    behaviors {
        backdel: backdel {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKDEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        rgui_uml: rgui_uml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sl>;
            display-name = "Rgui and Umlaute";
        };

        q_uit: q_uit {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp Q>, <&quit>;
            
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        esc_v: esc_v {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp ESC>, <&kp V>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        lt_esc_v: lt_esc_v {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&esc_v>;
        };
        
        lt_kp: copy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        mt_longer: mt_longer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };

        mt_mse: mt_mouse {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&mkp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <300>;
            key-positions = <12 34>; // lctrl (12) + tab (34)
            bindings = <&app_switch>;
            layers = <0>;
            slow-release;
        };

        combo_caps_word {
            timeout-ms = <100>;
            key-positions = <13 16>; // rshft (13) + lshift (16)
            bindings = <&caps_word>;
            layers = <0>;
        };

        combo_interrupt {
            timeout-ms = <300>;
            key-positions = <11 23>; // lalt + c
            bindings = <&interrupt>;
            layers = <0>;
        };

        activate_mouse {
            bindings = <&tog 5>;
            key-positions = <35 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // 0
        base {
            bindings = <
       &q_uit             &kp W       &kp E        &kp R          &kp T    &kp DE_Z   &kp U        &kp I        &kp O       &kp P
       &mt_longer LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F    &kp G    &kp H      &mt RSHFT J  &mt RCTRL K  &mt RALT L  &rgui_uml RGUI 1
&mo 2  &kp DE_Y           &kp X       &kp C        &kp V          &kp B    &kp N      &kp M        &kp COMMA    &kp DOT     &kp DE_MINS       &backdel
                               &lt_kp 4 C   &lt_esc_v 3 0  &kp TAB  &kp SPACE  &lt 3 ENTER  &mo 4
            >;
        };

        // 1
        umlaute {
            bindings = <
        &trans       &trans     &trans  &trans     &trans  &trans  &kp DE_UDIA  &trans  &kp DE_ODIA  &trans
        &kp DE_ADIA  &kp DE_SS  &trans  &kp LSHFT  &trans  &trans  &kp RSHFT    &trans  &trans       &trans
&trans  &trans       &trans     &trans  &trans     &trans  &trans  &trans       &trans  &trans       &trans  &trans
                                &trans  &trans     &trans  &trans  &trans       &trans
            >;

            label = "_uml";
        };

        // 2
        numpad {
            bindings = <
        &trans  &trans       &trans       &trans          &trans       &trans      &kp N7  &kp N8  &kp N9  &trans
        &trans  &kp DE_PLUS  &kp DE_MINS  &kp DE_ASTR     &kp DE_SLSH  &trans      &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &bt BT_PRV   &bt BT_CLR   &bt BT_CLR_ALL  &bt BT_NXT   &trans      &kp N1  &kp N2  &kp N3  &trans &trans
                             &trans       &kp COMMA       &kp DOT      &kp DE_EQL  &kp N0  &trans
            >;

            label = "_num";
        };

        // 3
        symbols {
            bindings = <
            &trans       &trans       &kp DE_EXLM  &kp DE_LABK  &kp DE_LBRC  &kp DE_RBRC  &kp DE_RABK  &kp DE_QUES  &trans       &trans
            &kp DE_SECT  &kp DE_DQUO  &kp DE_QUOT  &kp DE_GRV   &kp DE_LCBR  &kp DE_RCBR  &kp DE_SLSH  &kp DE_PIPE  &kp DE_BSLS  &trans
&caps_word  &kp DE_EURO  &kp DE_DLR   &kp DE_PERC  &trans       &kp DE_LPRN  &kp DE_RPRN  &kp DE_CIRC  &kp DE_TILD  &trans       &trans  &lambda
                                      &kp DE_AMPR  &trans       &kp DE_HASH  &kp DE_AT    &trans       &kp DE_PIPE
            >;

            label = "_sym";
        };

        // 4
        fn_n_arrows {
            bindings = <
        &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8    &kp F9    &kp F10  &kp F11
        &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT   
&kp F1  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans   &trans     &kp F12
                        &trans  &trans  &trans  &trans  &trans    &trans
            >;

            label = "_nav";
        };

        // 5
        mouse {
            bindings = <
                &none  &none  &none  &none  &none  &none          &none      &none               &none               &none
                &none  &none  &none  &none  &none  &none          &mkp LCLK  &mt_mse RSHFT RCLK  &mt_mse RCTRL MCLK  &kp RALT
&tb_bootloader  &none  &none  &none  &none  &none  &none          &none      &none               &none               &none  &none
                              &none  &none  &none  &tb_mo_scroll  &none      &none
            >;
        };
    };
};
